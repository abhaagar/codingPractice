
Default Constructor:
--------------------
- default constructor is not created by default but only when needed. for e.g
class A {
   int a;
};
  here class A will not have default constructor created by compiler.
class B {
   b() {}
};
class C {
  B b;
  int c;
};
now class C will have default constructor because b has to be initialized and hence
default constructor of B has to be called from somewhere (from default created default
constructor of class C but it does not initialize c).


- Even if the default constructor iis provided for container class but not calling containee
  class's constructor, compiler augments it.

Copy Constructor:
-----------------
- XX x;
  Xx x1 = x;
- foo(x)
- return x;

- what if no copy constructor then memberwise initialization happens.
#include<iostream>
using namespace std;
class A {
   public:
      A(const A& _a) {
         cout << "copy constructor\n";
      }
      A() {
         cout << "default constructor\n";
      }
};

class B {
   A a;
};

int main() {
   A a;
   A b(a);
   B c;
   B d(c);
   return 0;
}
default constructor
copy constructor
default constructor
copy constructor

- copy constructor will created by compiler only if it is needed for example class is derived from a another class which has copy constructor because now that copy constructor of base class has to be called.
- provide copy constructor even if it is not needed so that compiler can perfrom NRV (Named Return Value Optimization).


Member Initialisation List:
----------------------------
- the compiler iterates over and possibly reorders the initialization list to reflect the declaration order of the members. It inserts the code within the body of the constructor prior to any explicit user code. 
